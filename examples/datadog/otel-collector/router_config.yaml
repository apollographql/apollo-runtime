supergraph:
  # The socket address and port to listen on
  listen: 0.0.0.0:4000
  # Allows an MCP server to use its introspect tool on our graph
  introspection: true
telemetry:
  instrumentation:
    # OTel span attributes you will see:
    #    - HTTP server span attributes: https://opentelemetry.io/docs/specs/semconv/http/http-spans/#http-server-span
    #    - HTTP client span attributes: https://opentelemetry.io/docs/specs/semconv/http/http-spans/#http-client-span
    #    - GraphQL server span attributes: https://opentelemetry.io/docs/specs/semconv/graphql/graphql-spans/
    spans: # https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/spans
      default_attribute_requirement_level: recommended # change to "required" for less data https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/spans#default_attribute_requirement_level

      router: # Apollo specific attribute options: https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/standard-attributes#router
        attributes:
          otel.name: router
          operation.name: "router"
          resource.name:
            request_method: true # or replace with <operation_name : string> to see the operation name of the graphql request in the APM UI but be weary of trace metrics. This could result in high cardinality metrics on the resource_name attribute. ex: avg:trace.router{*} by {resource_name}

      supergraph: # Apollo specific attribute options: https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/standard-attributes#supergraph
        attributes:
          otel.name: supergraph
          operation.name: "supergraph"
          resource.name:
            operation_name: string
          otel.status_code:  # This attribute will be set to true if the response from the router contained errors in the response body and will mark spans as Error in the APM UI.
            static: ERROR
            condition:
              eq:
                - true
                - on_graphql_error: true
          otel.status_description:
            response_errors: $[0].extensions.code
          error.message:
            response_errors: $[0].message
          graphql.errors:
            on_graphql_error: true

      subgraph: # Apollo specific attribute options: https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/standard-attributes#subgraph
        attributes:
          otel.name: subgraph
          operation.name: "subgraph"
          resource.name:
            subgraph_operation_name: string
          otel.status_code:  # This attribute will be set to true if the response from the subgraph contained errors in the response body and will mark spans as Error in the APM UI.
            static: ERROR
            condition:
              eq:
                - true
                - subgraph_on_graphql_error: true
          otel.status_description:
            subgraph_response_errors: $[0].extensions.code
          graphql.errors:
            subgraph_on_graphql_error: true
          # Datadog Error Tracking attributes to populate spans with graphql response error data in the APM UI: error.*
          error.message:
            subgraph_response_errors: $[0].message
          error.stack:
            subgraph_response_errors: $[0].extensions.stacktrace


      # OTel metrics and attributes you will see:
      #    - HTTP Server metrics: https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#http-server
      #    - HTTP Client metrics: https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#http-client
    instruments: # https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/instruments
      default_requirement_level: required # change to "recommended" for more data https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/instruments#default_requirement_level

      router:
        http.server.request.duration: # https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration
          attributes:
            graphql.errors: # This attribute will be set to true if the response from the router contained errors in the response body
              on_graphql_error: true

      subgraph:
        http.client.request.duration: # https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpclientrequestduration
          attributes:
            subgraph.name: true
            http.response.status_code:
              subgraph_response_status: code # https://www.apollographql.com/docs/graphos/routing/observability/telemetry/instrumentation/selectors#subgraph
            graphql.errors: # This attribute will be set to true if the response from the subgraph contained errors in the response body
              subgraph_on_graphql_error: true

      connector:
        http.client.request.body.size:
          attributes:
            connector.source.name: true
            subgraph.name: true
        http.client.request.duration:
          attributes:
            connector.source.name: true
            subgraph.name: true
            http.response.status_code:
              connector_http_response_status: code
        http.client.response.body.size:
          attributes:
            connector.source.name: true
            subgraph.name: true
  # Export metrics/traces to our local otel collector
  exporters:
    logging:
      stdout:
        enabled: true
        format: text

    metrics:
      common:
        resource: ## Resource attributes are used to identify the service in datadog see https://docs.datadoghq.com/opentelemetry/mapping/semantic_mapping/?tab=datadogexporter and https://opentelemetry.io/docs/specs/semconv/resource/ and https://www.apollographql.com/docs/graphos/routing/observability/telemetry/metrics-exporters/overview#resource
          "deployment.environment.name": "local"
          "host.name": "<INSERT_HOSTNAME_HERE>"
          "service.name": "runtime-all-in-one:router"
      otlp:
        temporality: delta # <-- REQUIRED for Datadog
        enabled: true
        endpoint: http://localhost:4317
        protocol: grpc

    tracing:
      propagation: # https://www.apollographql.com/docs/graphos/routing/observability/telemetry/trace-exporters/overview#propagation
        trace_context: true
      common:
        sampler: 1.0 # Send all traces to collector for intelligent sampling
        resource: ## Resource attributes are used to identify the service in datadog see https://docs.datadoghq.com/opentelemetry/mapping/semantic_mapping/?tab=datadogexporter and https://opentelemetry.io/docs/specs/semconv/resource/ and https://www.apollographql.com/docs/graphos/routing/observability/telemetry/metrics-exporters/overview#resource
          "deployment.environment.name": "local"
          "host.name": "<INSERT_HOSTNAME_HERE>"
          "service.name": "runtime-all-in-one:router"
      otlp:
        temporality: delta
        enabled: true
        endpoint: http://localhost:4317
        protocol: grpc
# Helps an MCP server to figure out what may be going wrong with queries
include_subgraph_errors:
  all: true